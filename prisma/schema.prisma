generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      Password?
  registrations Registration[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Registration {
  id             String   @id @default(cuid())
  User           User     @relation(fields: [userId], references: [id])
  userId         String
  registrantName String
  matchId        String
  createdAt      DateTime @default(now())
  Match          Match    @relation(fields: [matchId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Player         Player   @relation(fields: [playerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  playerId       String   @unique
}

model Match {
  id            String         @id @default(cuid())
  seatLimit     Int
  roundsCount   Int
  roundIdx      Int            @default(-1)
  createdAt     DateTime       @default(now())
  startTime     DateTime?
  updatedAt     DateTime       @updatedAt
  endTime       DateTime?
  Registrations Registration[]
  Seats         Seat[]
  Rounds        Round[]
}

model Round {
  id          String        @id @default(cuid())
  match       Match         @relation(fields: [matchId], references: [id], onUpdate: Cascade)
  matchId     String        @unique
  startTime   DateTime      @default(now())
  endTime     DateTime?
  turns       Turn[]
  startingPos String        @default("E")
  deck        DeckCard[]
  deckCount   Int           @default(0)
  discards    DiscardCard[]
}

model Turn {
  id         String    @id @default(cuid())
  atPlayer   Player    @relation(fields: [atPlayerId], references: [id], onUpdate: Cascade)
  atPlayerId String    @unique
  startTime  DateTime  @default(now())
  endTime    DateTime?
  round      Round     @relation(fields: [roundId], references: [id], onUpdate: Cascade)
  roundId    String
  timeLimit  Int
  action     Action[]
}

model Seat {
  id         String  @id @default(cuid())
  nametag    String
  cardCount  Int     @default(0)
  // N S E W
  position   String
  Match      Match   @relation(fields: [matchId], references: [id], onUpdate: Cascade)
  matchId    String
  occupant   Player?
  occupantId String?
  totalScore Int     @default(0)
  lastScore  Int     @default(0)
}

model Player {
  id             String        @id @default(cuid())
  hand           HandCard[]
  Actions        Action[]
  Turn           Turn?
  Seat           Seat?         @relation(fields: [seatId], references: [id], onUpdate: Cascade)
  seatId         String?       @unique
  Registration   Registration?
  registrationId String?
}

model HandCard {
  id       String @id @default(cuid())
  value    Int
  cardType String
  Player   Player @relation(fields: [playerId], references: [id])
  playerId String
}

model DeckCard {
  id       String @id @default(cuid())
  value    Int
  cardType String
  round    Round  @relation(fields: [roundId], references: [id])
  roundId  String
}

model Card {
  id       String  @id @default(cuid())
  value    Int
  cardType String
  action   Action? @relation(fields: [actionId], references: [id])
  actionId String?
}

model Action {
  id       String  @id @default(cuid())
  Player   Player? @relation(fields: [playerId], references: [id])
  playerId String?
  // Action types include (but not limited to) discard, draw, callout + [bong, banghaji, stop]
  type     String
  card     Card[]
  turn     Turn    @relation(fields: [turnId], references: [id])
  turnId   String
}

model DiscardCard {
  id             String @id @default(cuid())
  // N S E W
  originPosition String
  round          Round  @relation(fields: [roundId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roundId        String
  value          Int
  cardType       String
}
